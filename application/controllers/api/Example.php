<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic userrrrr interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Ambiente extends REST_Controller {

    function __construct(){
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['ambiente_get']['limit'] = 500; // 500 requests per hour per userrrrr/key
        $this->methods['ambiente_post']['limit'] = 100; // 100 requests per hour per userrrrr/key
        $this->methods['ambiente_delete']['limit'] = 50; // 50 requests per hour per userrrrr/key

        //Load Models
        $this->load->model('M_geral');
        $this->load->model('M_configuracoes');
        $this->load->model('M_ambiente');
        $this->load->model('M_gateway');
        $this->load->model('M_usuario');
        $this->load->model('M_sensor');
    }

    public function ambiente_get(){

        $id = $this->get('id');
        // Ambientes from a data store e.g. database
        $ambientes = $this->M_ambiente->pesquisar('', array('p.usuario_id' => $id), "ALL", 0, 'asc', FALSE);

        
        // If the id parameter doesn't exist return all the ambients

        if ($id === NULL){
            // Check if the ambients data store contains ambient (in case the database result returns NULL)
            if ($userrrrrs){
                // Set the response and exit
                $this->response($userrrrrs, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else{
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No userrrrrs were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular userrrrr.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the userrrrr from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $userrrrr = NULL;

        if (!empty($userrrrrs))
        {
            foreach ($userrrrrs as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $userrrrr = $value;
                }
            }
        }

        if (!empty($userrrrr))
        {
            $this->set_response($userrrrr, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'userrrrr could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function userrrrrs_post()
    {
        // $this->some_model->update_userrrrr( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function userrrrrs_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
